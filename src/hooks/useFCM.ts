
import { useState, useEffect } from 'react';
import { requestFCMToken, onForegroundMessage, testLocalNotification } from '@/lib/firebase';
import { toast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

export const useFCM = () => {
  const [fcmToken, setFcmToken] = useState<string | null>(null);
  const [isSupported, setIsSupported] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [permissionStatus, setPermissionStatus] = useState<NotificationPermission>('default');

  useEffect(() => {
    const initializeFCM = async () => {
      // Verificar suporte b√°sico
      const hasNotificationSupport = 'Notification' in window;
      const hasServiceWorkerSupport = 'serviceWorker' in navigator;
      const isValidProtocol = window.location.protocol === 'https:' || 
                              window.location.hostname === 'localhost' ||
                              window.location.hostname === '127.0.0.1';

      console.log('üîç Verificando suporte:');
      console.log('  - Notifica√ß√µes:', hasNotificationSupport);
      console.log('  - Service Workers:', hasServiceWorkerSupport);
      console.log('  - Protocolo v√°lido:', isValidProtocol);

      const supported = hasNotificationSupport && hasServiceWorkerSupport && isValidProtocol;
      setIsSupported(supported);

      if (supported) {
        setPermissionStatus(Notification.permission);
        
        // Verificar se j√° temos token salvo e v√°lido
        const savedToken = localStorage.getItem('fcm-admin-token');
        if (savedToken && Notification.permission === 'granted') {
          setFcmToken(savedToken);
          console.log('‚úÖ Token FCM recuperado do localStorage:', savedToken.substring(0, 20) + '...');
        }

        // Configurar listener para mensagens em primeiro plano
        const unsubscribe = onForegroundMessage((payload) => {
          console.log('üì± Notifica√ß√£o recebida em primeiro plano:', payload);
          
          toast({
            title: "üîî Novo pedido recebido!",
            description: "Voc√™ recebeu um novo pedido no site da Rascunho Luminoso.",
            duration: 8000,
          });
        });

        return unsubscribe;
      } else {
        console.log('‚ùå Plataforma n√£o suporta notifica√ß√µes push completas');
      }
    };

    initializeFCM();
  }, []);

  const saveAdminToken = async (token: string) => {
    try {
      console.log('üíæ Salvando token do administrador no backend...');
      
      // Usar a fun√ß√£o RPC do Supabase para salvar o token
      const { error } = await supabase.rpc('upsert_fcm_token', {
        p_token: token,
        p_user_type: 'admin',
        p_is_active: true
      });

      if (error) {
        console.error('‚ùå Erro ao salvar token no Supabase:', error);
        throw error;
      }

      console.log('‚úÖ Token do administrador salvo com sucesso no backend');
      
    } catch (error: any) {
      console.error('‚ùå Erro ao comunicar com backend:', error);
      throw new Error(`Erro ao salvar no servidor: ${error.message}`);
    }
  };

  const requestPermission = async () => {
    if (!isSupported) {
      toast({
        title: "‚ùå N√£o suportado",
        description: "Seu navegador ou conex√£o n√£o suporta notifica√ß√µes push. Use HTTPS, Chrome, Firefox ou Safari.",
        variant: "destructive",
      });
      return null;
    }

    setIsLoading(true);

    try {
      console.log('üöÄ Iniciando processo de ativa√ß√£o de notifica√ß√µes...');
      
      // Mostrar toast informativo
      toast({
        title: "üîî Configurando notifica√ß√µes...",
        description: "Por favor, permita as notifica√ß√µes quando solicitado.",
        duration: 5000,
      });

      const token = await requestFCMToken();
      
      if (token) {
        setFcmToken(token);
        setPermissionStatus('granted');
        
        // Salvar token localmente e no backend
        localStorage.setItem('fcm-admin-token', token);
        await saveAdminToken(token);
        
        console.log('‚úÖ Processo de ativa√ß√£o conclu√≠do com sucesso!');
        
        toast({
          title: "‚úÖ Notifica√ß√µes ativadas!",
          description: "Voc√™ receber√° alertas sobre novos pedidos, mesmo com o navegador fechado.",
          duration: 8000,
        });
        
        return token;
      } else {
        throw new Error('Token FCM n√£o foi gerado');
      }
      
    } catch (error: any) {
      console.error('‚ùå Erro no processo de ativa√ß√£o:', error);
      
      let userMessage = "N√£o foi poss√≠vel ativar as notifica√ß√µes.";
      
      if (error.message.includes('negada')) {
        userMessage = "Permiss√£o negada. Clique no √≠cone de cadeado na barra de endere√ßos e permita notifica√ß√µes.";
      } else if (error.message.includes('HTTPS')) {
        userMessage = "Notifica√ß√µes requerem HTTPS. Acesse o site via HTTPS.";
      } else if (error.message.includes('bloqueada')) {
        userMessage = "Notifica√ß√µes bloqueadas. V√° em configura√ß√µes do navegador > notifica√ß√µes e permita para este site.";
      }
      
      toast({
        title: "‚ùå Erro ao ativar notifica√ß√µes",
        description: userMessage,
        variant: "destructive",
        duration: 10000,
      });
      
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  const disableNotifications = async () => {
    try {
      if (fcmToken) {
        // Desativar token no backend
        console.log('üîï Desativando token no backend...');
        await supabase
          .from('fcm_tokens')
          .update({ is_active: false })
          .eq('token', fcmToken);
      }
      
      setFcmToken(null);
      localStorage.removeItem('fcm-admin-token');
      
      toast({
        title: "üîï Notifica√ß√µes desativadas",
        description: "Voc√™ n√£o receber√° mais notifica√ß√µes push.",
      });
      
      console.log('üîï Notifica√ß√µes desativadas pelo usu√°rio');
    } catch (error) {
      console.error('‚ùå Erro ao desativar notifica√ß√µes:', error);
      toast({
        title: "‚ö†Ô∏è Erro",
        description: "Erro ao desativar notifica√ß√µes, mas foram removidas localmente.",
        variant: "destructive",
      });
    }
  };

  const testNotification = () => {
    try {
      if (Notification.permission !== 'granted') {
        toast({
          title: "‚ùå Permiss√£o necess√°ria",
          description: "Ative as notifica√ß√µes primeiro para fazer o teste.",
          variant: "destructive",
        });
        return;
      }

      console.log('üß™ Testando notifica√ß√£o local...');
      testLocalNotification();
      
      toast({
        title: "üß™ Teste enviado",
        description: "Se as notifica√ß√µes est√£o funcionando, voc√™ ver√° uma notifica√ß√£o do sistema agora.",
        duration: 5000,
      });
      
    } catch (error: any) {
      console.error('‚ùå Erro no teste:', error);
      toast({
        title: "‚ùå Erro no teste",
        description: error.message,
        variant: "destructive",
      });
    }
  };

  return {
    fcmToken,
    isSupported,
    isLoading,
    permissionStatus,
    requestPermission,
    disableNotifications,
    testNotification,
  };
};
