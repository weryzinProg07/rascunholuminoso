
import { initializeApp } from 'firebase/app';
import { getMessaging, getToken, onMessage, isSupported } from 'firebase/messaging';

// Configura√ß√£o do Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDGqK8v7pHWkOleLr190syJKEGCJhXwc",
  authDomain: "rascunho-luminoso.firebaseapp.com",
  projectId: "rascunho-luminoso",
  storageBucket: "rascunho-luminoso.appspot.com",
  messagingSenderId: "123456789012",
  appId: "1:123456789012:web:abcdefghijklmnop"
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);

// Chave VAPID p√∫blica
const VAPID_KEY = 'Z8JPXbqK-VKEfwLu8v7pHWkOleLr190syJKEGCJhXwc';

let messaging: any = null;

// Fun√ß√£o para verificar se o ambiente suporta FCM
const checkEnvironmentSupport = () => {
  console.log('üîç Verificando suporte do ambiente...');
  
  // Verificar se est√° no navegador
  if (typeof window === 'undefined') {
    console.error('‚ùå N√£o est√° rodando no navegador');
    return false;
  }

  // Verificar notifica√ß√µes
  if (!('Notification' in window)) {
    console.error('‚ùå Navegador n√£o suporta notifica√ß√µes');
    return false;
  }

  // Verificar Service Workers
  if (!('serviceWorker' in navigator)) {
    console.error('‚ùå Navegador n√£o suporta Service Workers');
    return false;
  }

  // Verificar HTTPS ou localhost
  const isSecure = window.location.protocol === 'https:' || 
                   window.location.hostname === 'localhost' ||
                   window.location.hostname === '127.0.0.1' ||
                   window.location.hostname === '[::1]';

  if (!isSecure) {
    console.error('‚ùå Notifica√ß√µes requerem HTTPS ou localhost');
    return false;
  }

  console.log('‚úÖ Ambiente suporta FCM completamente');
  return true;
};

// Fun√ß√£o para registrar Service Worker
const registerServiceWorker = async () => {
  try {
    console.log('üîß Registrando Service Worker...');
    
    // Verificar se j√° existe
    const existingRegistration = await navigator.serviceWorker.getRegistration();
    if (existingRegistration) {
      console.log('‚úÖ Service Worker j√° registrado:', existingRegistration.scope);
      return existingRegistration;
    }

    // Registrar novo SW
    const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js');
    console.log('‚úÖ Service Worker registrado com sucesso:', registration.scope);

    // Aguardar que fique ativo
    if (registration.installing) {
      console.log('‚è≥ Service Worker instalando...');
      await new Promise((resolve) => {
        registration.installing!.addEventListener('statechange', () => {
          if (registration.installing!.state === 'activated') {
            resolve(registration);
          }
        });
      });
    }

    console.log('‚úÖ Service Worker ativo e funcionando');
    return registration;

  } catch (error) {
    console.error('‚ùå Erro ao registrar Service Worker:', error);
    throw new Error(`Falha no Service Worker: ${error.message}`);
  }
};

// Fun√ß√£o para solicitar permiss√£o de notifica√ß√µes
const requestNotificationPermission = async () => {
  console.log('üîî Verificando permiss√£o de notifica√ß√µes...');
  
  let permission = Notification.permission;
  console.log('üìã Permiss√£o atual:', permission);

  if (permission === 'default') {
    console.log('‚ùì Solicitando permiss√£o ao usu√°rio...');
    permission = await Notification.requestPermission();
    console.log('üìã Nova permiss√£o:', permission);
  }

  if (permission === 'denied') {
    throw new Error('Permiss√£o para notifica√ß√µes foi negada. Voc√™ precisa ir nas configura√ß√µes do navegador e permitir notifica√ß√µes para este site.');
  }

  if (permission !== 'granted') {
    throw new Error('Permiss√£o para notifica√ß√µes n√£o foi concedida');
  }

  console.log('‚úÖ Permiss√£o para notifica√ß√µes concedida');
  return permission;
};

// Fun√ß√£o principal para obter token FCM
export const requestFCMToken = async () => {
  try {
    console.log('üöÄ === INICIANDO PROCESSO FCM ===');
    
    // 1. Verificar suporte do ambiente
    if (!checkEnvironmentSupport()) {
      throw new Error('Ambiente n√£o suporta notifica√ß√µes push');
    }

    // 2. Verificar se FCM √© suportado
    const supported = await isSupported();
    if (!supported) {
      throw new Error('Firebase Messaging n√£o √© suportado neste navegador');
    }
    console.log('‚úÖ Firebase Messaging suportado');

    // 3. Inicializar messaging
    messaging = getMessaging(app);
    console.log('‚úÖ Firebase Messaging inicializado');

    // 4. Registrar Service Worker
    const registration = await registerServiceWorker();

    // 5. Solicitar permiss√£o
    await requestNotificationPermission();

    // 6. Obter token FCM
    console.log('üé´ Obtendo token FCM...');
    console.log('üîë Usando VAPID Key:', VAPID_KEY.substring(0, 20) + '...');
    
    const token = await getToken(messaging, {
      vapidKey: VAPID_KEY,
      serviceWorkerRegistration: registration
    });

    if (!token) {
      throw new Error('Token FCM n√£o foi gerado. Verifique a configura√ß√£o do Firebase.');
    }

    console.log('‚úÖ === TOKEN FCM OBTIDO COM SUCESSO ===');
    console.log('üé´ Token:', token);
    console.log('üìè Tamanho do token:', token.length, 'caracteres');
    
    return token;

  } catch (error: any) {
    console.error('‚ùå === ERRO NO PROCESSO FCM ===');
    console.error('‚ùå Erro:', error);
    console.error('‚ùå Mensagem:', error.message);
    console.error('‚ùå Stack:', error.stack);
    
    // Melhorar mensagens de erro para o usu√°rio
    let userMessage = error.message;
    
    if (error.code === 'messaging/permission-blocked') {
      userMessage = 'Notifica√ß√µes foram bloqueadas. Clique no √≠cone de cadeado/notifica√ß√£o na barra de endere√ßos e permita notifica√ß√µes.';
    } else if (error.code === 'messaging/vapid-key-required') {
      userMessage = 'Chave VAPID √© obrigat√≥ria para notifica√ß√µes.';
    } else if (error.code === 'messaging/registration-token-not-registered') {
      userMessage = 'Token de registro inv√°lido. Tente recarregar a p√°gina.';
    } else if (error.message.includes('denied')) {
      userMessage = 'Permiss√£o negada. V√° em Configura√ß√µes do navegador > Privacidade e seguran√ßa > Permiss√µes do site > Notifica√ß√µes e permita para este site.';
    } else if (error.message.includes('HTTPS')) {
      userMessage = 'Notifica√ß√µes s√≥ funcionam em HTTPS. Acesse o site via HTTPS.';
    }
    
    throw new Error(userMessage);
  }
};

// Fun√ß√£o para ouvir mensagens em primeiro plano
export const onForegroundMessage = (callback: (payload: any) => void) => {
  if (!messaging) {
    console.error('‚ùå Firebase Messaging n√£o inicializado');
    return () => {};
  }

  try {
    console.log('üëÇ Configurando listener para mensagens em primeiro plano...');
    
    return onMessage(messaging, (payload) => {
      console.log('üì± Mensagem FCM recebida em primeiro plano:', payload);
      callback(payload);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar listener:', error);
    return () => {};
  }
};

// Fun√ß√£o para testar notifica√ß√£o local
export const testLocalNotification = () => {
  try {
    if (Notification.permission !== 'granted') {
      throw new Error('Permiss√£o para notifica√ß√µes n√£o foi concedida');
    }

    console.log('üß™ Criando notifica√ß√£o de teste...');
    
    const notification = new Notification('üß™ Teste - Rascunho Luminoso', {
      body: 'Esta √© uma notifica√ß√£o de teste! Se voc√™ v√™ isso, as notifica√ß√µes est√£o funcionando perfeitamente.',
      icon: '/lovable-uploads/9d315dc9-03f6-4949-85dc-8c64f34b1b8f.png',
      badge: '/lovable-uploads/9d315dc9-03f6-4949-85dc-8c64f34b1b8f.png',
      tag: 'test-notification',
      requireInteraction: true
    } as NotificationOptions);
    
    notification.onclick = () => {
      console.log('üîî Notifica√ß√£o de teste clicada');
      notification.close();
    };
    
    console.log('‚úÖ Notifica√ß√£o de teste criada');
    return notification;
    
  } catch (error: any) {
    console.error('‚ùå Erro ao criar notifica√ß√£o de teste:', error);
    throw new Error(`Erro no teste: ${error.message}`);
  }
};

export { messaging };
